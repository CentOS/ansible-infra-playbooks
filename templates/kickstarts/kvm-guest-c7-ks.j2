# Kickstart file automatically generated by Ansible.
# {{ ansible_managed }}

# System authorization information
auth --enableshadow --passalgo=sha512

# Use network installation
{% if kvm_guest_arch == 'ppc64le' or kvm_guest_arch == 'ppc64' or kvm_guest_arch == 'aarch64' %}
url --url="http://mirror.centos.org/altarch/{{ kvm_guest_distro_release }}/os/{{ kvm_guest_arch}}/"
{% else %}
url --url="http://mirror.centos.org/centos/{{ kvm_guest_distro_release }}/os/{{ kvm_guest_arch}}/"
{% endif %}
# Run the Setup Agent on first boot
firstboot --enable
#ignoredisk --only-use=sda
# Keyboard layouts
# old format: keyboard be-latin1
# new format:
keyboard --vckeymap=be-latin1 --xlayouts='be'
# System language
lang en_GB.UTF-8

{% if kvm_guest_ip is defined %}
network --device eth0 --bootproto static --ip {{ kvm_guest_ip }} --netmask {{ kvm_guest_netmask }} --gateway {{ kvm_guest_gateway }} --nameserver {{ kvm_guest_nameserver }} --hostname {{ inventory_hostname }} --activate
{% else %}
network --device eth0 --bootproto dhcp --hostname {{ inventory_hostname }}
{% endif %}

{% if kvm_guest_eth1 is defined %}
network --activate --device eth1 --bootproto static --ip {{ kvm_guest_eth1_ip }} --netmask {{ kvm_guest_eth1_netmask }} 
{% endif %}

# Root password
rootpw --iscrypted {{ kvm_guest_root_pass | password_hash('sha512') }}
# System services
services --enabled="chronyd"
# System timezone
timezone Europe/London --isUtc
# System bootloader configuration
bootloader --location=mbr --boot-drive=vda
# Partition clearing information
clearpart --all --initlabel 
# Disk partitioning information
{% if kvm_guest_arch == 'ppc64le' or kvm_guest_arch == 'ppc64' %}
part prepboot --asprimary --fstype=prepboot --size=10
{% endif %}
{% if kvm_guest_arch == 'aarch64' %}
part /boot/efi --fstype="vfat" --ondisk=vda --size=200
{% endif %}

part /boot --fstype="ext4" --ondisk=vda --size=1024

{%if kvm_guest_luks_encrypted %}
part pv.14 --fstype="lvmpv" --ondisk=vda --size=10000 --grow --encrypted --passphrase={{ kvm_guest_luks_passphrase }}
{% else %}
part pv.14 --fstype="lvmpv" --ondisk=vda --size=10000 --grow
{% endif %}

volgroup vg_{{ inventory_hostname_short }} --pesize=4096 pv.14
logvol /  --fstype="ext4" --size=10000 --grow --name=root --vgname=vg_{{ inventory_hostname_short }}
logvol /home  --fstype="ext4" --size={{ kvm_guest_disk_home_size | default(2048) }} --name=home --vgname=vg_{{ inventory_hostname_short }}
logvol swap  --fstype="swap" --size=2048 --name=swap --vgname=vg_{{ inventory_hostname_short }}

# Enabling both os and updates repositories at install time to avoid updating after install
{% if kvm_guest_arch == 'ppc64le' or kvm_guest_arch == 'ppc64' or kvm_guest_arch == 'aarch64' %}
repo --name="base" --baseurl=http://mirror.centos.org/altarch/{{ kvm_guest_distro_release }}/os/{{ kvm_guest_arch}}/ --cost=100
repo --name="updates" --baseurl=http://mirror.centos.org/altarch/{{ kvm_guest_distro_release }}/updates/{{ kvm_guest_arch}}/ --cost=100
{% else %}
repo --name="base" --baseurl=http://mirror.centos.org/centos/{{ kvm_guest_distro_release }}/os/{{ kvm_guest_arch}}/ --cost=100
repo --name="updates" --baseurl=http://mirror.centos.org/centos/{{ kvm_guest_distro_release }}/updates/{{ kvm_guest_arch}}/ --cost=100
{% endif %}

#Ensuring rebooting at the end
reboot

%packages
@core
chrony
%end

%addon com_redhat_kdump --disable
%end

%post

sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config 

# tuning ext4
/sbin/tune2fs -m 0.5 /dev/mapper/vg_{{ inventory_hostname_short }}-root

# Using Ansible vars to automatically render template and add users 
{% for user in admins_list %}
# Adding user,ssh pub key and sudo right for {{ user.login_name }} 
/sbin/useradd {{ user.login_name}} -c "{{ user.full_name }}"
mkdir /home/{{ user.login_name }}/.ssh
{% for key in user.ssh_pub_key  %}
  echo "{{ key }}" >> /home/{{ user.login_name }}/.ssh/authorized_keys
{% endfor %}
chmod 700 /home/{{ user.login_name }}/.ssh
chmod 600 /home/{{ user.login_name }}/.ssh/* ; chcon -v -R -t ssh_home_t /home/{{ user.login_name }}/.ssh*
chown -R {{ user.login_name }}.{{ user.login_name}} /home/{{ user.login_name }}/
echo "{{ user.login_name }} ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/{{ user.login_name }}
{% endfor %}

%end


